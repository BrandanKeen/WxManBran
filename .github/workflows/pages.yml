name: Deploy Jekyll site to Pages
on:
  push: { branches: [ "main" ] }
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Convert uploaded DOCX into Jekyll posts
      - name: Install pandoc
        run: sudo apt-get update && sudo apt-get install -y pandoc

      - name: Install DOCX fallback dependencies
        run: pip install --user mammoth

      - name: Prepare folders
        run: |
          mkdir -p _posts assets/docs incoming/posts

      - name: Convert incoming/posts/*.docx to _posts
        shell: bash
        run: |
          shopt -s nullglob
          files=(incoming/posts/*.docx)
          if [ ${#files[@]} -eq 0 ]; then
            echo "No DOCX posts found."
            exit 0
          fi

          for f in "${files[@]}"; do
            base="$(basename "$f" .docx)"
            if [[ ! "$base" =~ ^([0-9]{4})-([0-9]{2})-([0-9]{2})-(.+)$ ]]; then
              echo "Skipping $f: filename must follow YYYY-MM-DD-slug.docx" >&2
              continue
            fi

            yyyy="${BASH_REMATCH[1]}"
            mm="${BASH_REMATCH[2]}"
            dd="${BASH_REMATCH[3]}"
            slug="${BASH_REMATCH[4]}"
            date="$yyyy-$mm-$dd"
            title="$(python3 -c 'import sys; print(" ".join(w.capitalize() for w in sys.argv[1].split("-")))' "$slug")"

            slug_dir="assets/docs/$slug"
            media_dir="$slug_dir/media"
            rm -rf "$slug_dir"
            mkdir -p "$media_dir"

            tmp_html="$(mktemp "/tmp/${slug}.XXXX.html")"
            if pandoc "$f" -t html5 -o "$tmp_html" --extract-media="$slug_dir" --wrap=none; then
              echo "Converted $f with pandoc"
            else
              status=$?
              echo "Pandoc failed for $f (exit $status). Falling back to python-mammoth." >&2
              rm -rf "$slug_dir"
              python3 - "$f" "$slug" "$tmp_html" "$slug_dir" <<'PY'
import sys
import mimetypes
import pathlib
import shutil
from mammoth import convert_to_html, images

docx_path = pathlib.Path(sys.argv[1])
slug = sys.argv[2]
tmp_html = pathlib.Path(sys.argv[3])
slug_dir = pathlib.Path(sys.argv[4])
media_dir = slug_dir / "media"

if slug_dir.exists():
    shutil.rmtree(slug_dir)
media_dir.mkdir(parents=True, exist_ok=True)

counter = {"value": 0}

def _image_converter(image):
    counter["value"] += 1
    ext = mimetypes.guess_extension(image.content_type or "") or ".bin"
    filename = f"image{counter['value']}{ext}"
    dest = media_dir / filename
    with dest.open("wb") as fh:
        fh.write(image.binary)
    rel_path = "{{ '/" + dest.as_posix() + "' | relative_url }}"
    return {"src": rel_path}

with docx_path.open("rb") as docx_file:
    result = convert_to_html(docx_file, convert_image=images.img_element(_image_converter))

tmp_html.write_text(result.value, encoding="utf-8")

for message in result.messages:
    print(f"Mammoth: {message}", file=sys.stderr)
PY
            fi

            body_tmp="/tmp/$slug.body.html"
            sed -E "s#src=\"media/([^\"]*)\"#src=\"{{ '/assets/docs/$slug/media/\1' | relative_url }}\"#g" "$tmp_html" > "$body_tmp"

            cat > "_posts/$date-$slug.html" <<EOF
---
layout: default
title: "$title"
date: $date
---
$(cat "$body_tmp")
EOF
            rm -f "$tmp_html" "$body_tmp"
          done

      # Build and publish Jekyll
      - uses: actions/jekyll-build-pages@v1
      - uses: actions/upload-pages-artifact@v3
        with: { path: ./_site }

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
