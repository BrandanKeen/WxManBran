name: Deploy Jekyll site to Pages
on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pandoc
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc

      - name: Prepare folders
        run: mkdir -p _posts assets/docs incoming/posts

      - name: Convert incoming/posts/*.docx to _posts
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob

          files=(incoming/posts/*.docx)
          if [ ${#files[@]} -eq 0 ]; then
            echo "No DOCX posts found."; exit 0
          fi

          for f in "${files[@]}"; do
            base="$(basename "$f" .docx)"

            # Pattern A: YYYY-MM-DD-H[-MM]am|pm-slug.docx
            if [[ "$base" =~ ^([0-9]{4})-([0-9]{2})-([0-9]{2})-([1-9]|1[0-2])(?:-?([0-5][0-9]))?-(am|pm)-(.+)$ ]]; then
              yyyy="${BASH_REMATCH[1]}"; mm="${BASH_REMATCH[2]}"; dd="${BASH_REMATCH[3]}"
              hh12="${BASH_REMATCH[4]}"; min="${BASH_REMATCH[5]}"; ap="${BASH_REMATCH[6]}"
              slug="${BASH_REMATCH[7]}"; slug="${slug,,}"; [ -z "${min:-}" ] && min="00"
              hh12=$(printf "%d" "$hh12")
              if [ "$ap" = "pm" ] && [ "$hh12" -lt 12 ]; then hh24=$((hh12+12)); else hh24=$((hh12%12)); fi
              hh24=$(printf "%02d" "$hh24")
              date_iso="$yyyy-$mm-$dd $hh24:$min:00"

            # Pattern B: YYYY-MM-DD-slug.docx (defensive: strip time-like prefix from slug)
            elif [[ "$base" =~ ^([0-9]{4})-([0-9]{2})-([0-9]{2})-(.+)$ ]]; then
              yyyy="${BASH_REMATCH[1]}"; mm="${BASH_REMATCH[2]}"; dd="${BASH_REMATCH[3]}"; slug="${BASH_REMATCH[4]}"
              slug="${slug,,}"
              slug="$(echo "$slug" | sed -E 's/^([1-9]|1[0-2])(-?[0-5][0-9])?(am|pm)-//')"  # remove accidental time prefix
              date_iso="$yyyy-$mm-$dd 00:00:00"
            else
              echo "Skipping $f (bad name). Use YYYY-MM-DD[-H[-MM]am|pm]-slug.docx" >&2
              continue
            fi

            date_ymd="$yyyy-$mm-$dd"  # filename must be date-only for Jekyll
            title="$(echo "$slug" | tr '-' ' ' | sed 's/\b\(.\)/\u\1/g')"

            mkdir -p "assets/docs/$slug"
            pandoc "$f" -t html5 -o "/tmp/$slug.html" --extract-media="assets/docs/$slug" --wrap=none

            sed -E "s#src=\"(assets/docs/$slug/)?media/([^\"]*)\"#src=\"{{ '/assets/docs/$slug/media/\2' | relative_url }}\"#g" \
              "/tmp/$slug.html" > "/tmp/$slug.body.html"

            # Summary for tiles
            plain="$(sed -E 's/<(script|style)[^>]*>.*<\/\1>//g; s/<[^>]+>/ /g' /tmp/$slug.body.html | tr -s '[:space:]' ' ' | sed 's/^ //; s/ $//')"
            summary="$(printf '%s' "$plain" | cut -c1-160)"; [ ${#plain} -gt 160 ] && summary="${summary% *}â€¦"
            summary_esc="$(printf '%s' "$summary" | sed 's/\"/\\"/g')"

            # First image -> thumb
            thumb_file="$(find "assets/docs/$slug/media" -maxdepth 1 -type f \( -iname '*.png' -o -iname '*.jpg' -o -iname '*.jpeg' -o -iname '*.webp' -o -iname '*.gif' \) | head -n 1 || true)"
            thumb_rel=""; [ -n "$thumb_file" ] && thumb_rel="/${thumb_file#./}"

            out="_posts/$date_ymd-$slug.html"
            {
              echo '---'
              echo 'layout: default'
              echo "title: \"$title\""           # storm name only
              echo "date: $date_iso"            # includes hour (for first line)
              [ -n "$summary_esc" ] && echo "summary: \"$summary_esc\""
              [ -n "$thumb_rel" ] && echo "thumb: \"$thumb_rel\"" && echo "thumb_alt: \"$title\""
              echo '---'
              cat "/tmp/$slug.body.html"
            } > "$out"
            echo "Wrote $out"
          done

      - name: Build Jekyll site
        uses: actions/jekyll-build-pages@v1

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
